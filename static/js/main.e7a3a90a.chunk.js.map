{"version":3,"sources":["components/Navbar.tsx","App.tsx","pages/HomePage.tsx","utils/searchHelper.ts","components/SearchLink.tsx","utils/variables.ts","utils/PersonSexType.ts","utils/GenderKinds.ts","components/PeopleFilters.tsx","components/PersonLink.tsx","components/PersonItem.tsx","components/PeopleList.tsx","utils/PeopleSortType.ts","components/PeopleTable.tsx","components/Loader/Loader.tsx","api.ts","utils/servises.ts","pages/PeoplePage.tsx","pages/NotFoundPage.tsx","Root.tsx","index.tsx"],"names":["getActiveLinkClass","isActive","classNames","Navbar","className","role","to","App","HomePage","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","centuriesList","PersonSexTypeForFilter","GenderKinds","PeopleFilters","setSearchParams","query","get","sex","centuries","getAll","toggleCenturies","century","includes","filter","newCentury","Default","All","Male","Female","type","placeholder","onChange","event","target","map","isCentury","length","PersonLink","person","pathname","slug","name","PersonItem","born","died","motherName","fatherName","mother","father","slugFromParams","useParams","PeopleList","people","PeopleSortType","PeopleTable","sort","order","sortType","sortTypeKey","sortTypeValue","Loader","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","getPreparedName","preparedQuery","trim","toLowerCase","PeoplePage","useState","newPeople","setNewPeople","isLoading","setIsLoading","isError","setIsError","useEffect","getPeople","find","preparedPerson","catch","finally","visiblePeople","preparedPeople","Name","Sex","a","b","localeCompare","Born","Died","reverse","Math","ceil","preparedPersonName","preparedMotherName","preparedFatherName","getPreparedPeople","isDisplayErrorMessage","isNoPeopleOnServer","isPeopleOnServer","NotFoundPage","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.e7a3a90a.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst getActiveLinkClass = ({ isActive }: { isActive: boolean }) => (\n  classNames('navbar-item',\n    {\n      'has-background-grey-lighter': isActive,\n    })\n);\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink className={getActiveLinkClass} to=\"/\">\n            Home\n          </NavLink>\n\n          <NavLink\n            className={getActiveLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport './App.scss';\nimport { Navbar } from './components/Navbar';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n      <main className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </main>\n    </div>\n  );\n};\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","export const NO_PARENT = '-';\n\nexport const centuriesList = ['16', '17', '18', '19', '20'];\n\nexport const ONE_CENTURY = 100;\n","export enum PersonSexTypeForFilter {\n  All = 'All',\n  Male = 'Male',\n  Female = 'Female',\n}\n","export enum GenderKinds {\n  Female = 'f',\n  Male = 'm',\n  Default = '',\n}\n","import { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { SearchLink } from './SearchLink';\nimport { centuriesList } from '../utils/variables';\nimport { PersonSexTypeForFilter } from '../utils/PersonSexType';\nimport { getSearchWith } from '../utils/searchHelper';\nimport { GenderKinds } from '../utils/GenderKinds';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchParams(getSearchWith(searchParams, { query: event.target.value }));\n  };\n\n  const toggleCenturies = (century: string) => {\n    return centuries.includes(century)\n      ? centuries.filter(newCentury => newCentury !== century)\n      : [...centuries, century];\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames({\n            'is-active': sex === GenderKinds.Default,\n          })}\n          params={{ sex: null }}\n        >\n          {PersonSexTypeForFilter.All}\n        </SearchLink>\n        <SearchLink\n          className={classNames({\n            'is-active': sex === GenderKinds.Male,\n          })}\n          params={{ sex: GenderKinds.Male }}\n        >\n          {PersonSexTypeForFilter.Male}\n        </SearchLink>\n        <SearchLink\n          className={classNames({\n            'is-active': sex === GenderKinds.Female,\n          })}\n          params={{ sex: GenderKinds.Female }}\n        >\n          {PersonSexTypeForFilter.Female}\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuriesList.map(century => {\n              const isCentury = centuries.includes(century);\n\n              return (\n                <SearchLink\n                  key={century}\n                  data-cy=\"century\"\n                  className={classNames('button', 'mr-1', {\n                    'is-info': isCentury,\n                  })}\n                  params={{ centuries: toggleCenturies(century) }}\n                >\n                  {century}\n                </SearchLink>\n              );\n            })}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={classNames('button is-success', {\n                'is-outlined': !!centuries.length,\n              })}\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{ centuries: null, sex: null, query: null }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import { Link, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../types';\nimport { GenderKinds } from '../utils/GenderKinds';\n\ntype Props = {\n  person: Person\n};\n\nexport const PersonLink = ({ person }: Props) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      to={{ pathname: `../${person?.slug}`, search: searchParams.toString() }}\n      className={classNames({\n        'has-text-danger': person?.sex === GenderKinds.Female,\n      })}\n    >\n      {person?.name}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { useParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { NO_PARENT } from '../utils/variables';\nimport { PersonLink } from './PersonLink';\n\ntype Props = {\n  person: Person,\n};\n\nexport const PersonItem = ({\n  person,\n}: Props) => {\n  const {\n    slug,\n    sex,\n    born,\n    died,\n    motherName,\n    fatherName,\n    mother,\n    father,\n  } = person;\n\n  const { slug: slugFromParams } = useParams();\n\n  return (\n    <tr\n      data-cy=\"person\"\n      key={slug}\n      className={classNames({\n        'has-background-warning': slugFromParams === slug,\n      })}\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {mother\n          ? <PersonLink person={mother} />\n          : motherName ?? NO_PARENT}\n      </td>\n      <td>\n        {father\n          ? <PersonLink person={father} />\n          : fatherName ?? NO_PARENT}\n      </td>\n    </tr>\n  );\n};\n","import { Person } from '../types';\nimport { PersonItem } from './PersonItem';\n\ntype Props = {\n  people: Person[]\n};\n\nexport const PeopleList = ({ people }: Props) => {\n  return (\n    <tbody>\n      {people.map(person => {\n        return (\n          <PersonItem\n            key={person.slug}\n            person={person}\n          />\n        );\n      })}\n    </tbody>\n  );\n};\n","export enum PeopleSortType {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n}\n","import classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleList } from './PeopleList';\nimport { Person } from '../types';\nimport { PeopleSortType } from '../utils/PeopleSortType';\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  people: Person[]\n};\n\nexport const PeopleTable = ({ people }: Props) => {\n  const [searchParams] = useSearchParams();\n\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  const getSortParam = (sortType: PeopleSortType) => {\n    if (sort !== sortType) {\n      return { order: null, sort: sortType };\n    }\n\n    if (sort === sortType && !order) {\n      return { order: 'desc', sort: sortType };\n    }\n\n    return { order: null, sort: null };\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {Object.entries(PeopleSortType)\n            .map(([sortTypeKey, sortTypeValue]) => (\n              <th key={sortTypeKey}>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  {sortTypeKey}\n                  <SearchLink params={getSortParam(sortTypeValue)}>\n                    <span className=\"icon\">\n                      <i className={classNames('fas', {\n                        'fa-sort': sort !== sortTypeValue,\n                        'fa-sort-up': sort === sortTypeValue && !order,\n                        'fa-sort-down': sort === sortTypeValue,\n                      })}\n                      />\n                    </span>\n                  </SearchLink>\n                </span>\n              </th>\n            ))}\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n      <PeopleList people={people} />\n    </table>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { Person } from '../types';\nimport { GenderKinds } from './GenderKinds';\nimport { PeopleSortType } from './PeopleSortType';\nimport { ONE_CENTURY } from './variables';\n\nconst getPreparedName = (name:string | null, query:string) => {\n  const preparedQuery = query.trim().toLowerCase();\n\n  return name?.toLowerCase().includes(preparedQuery);\n};\n\nexport const getPreparedPeople = (\n  people: Person[],\n  query: string,\n  sex: string,\n  centuries: string[],\n  sort: string,\n  order: string,\n): Person[] => {\n  let preparedPeople = [...people];\n\n  if (sort) {\n    switch (sort) {\n      case PeopleSortType.Name:\n      case PeopleSortType.Sex:\n        preparedPeople = preparedPeople\n          .sort((a, b) => a[sort].localeCompare(b[sort]));\n        break;\n      case PeopleSortType.Born:\n      case PeopleSortType.Died:\n        preparedPeople = preparedPeople\n          .sort((a, b) => a[sort] - b[sort]);\n        break;\n      default:\n        return preparedPeople;\n    }\n  }\n\n  if (order) {\n    preparedPeople = preparedPeople.reverse();\n  }\n\n  if (centuries.length) {\n    preparedPeople = preparedPeople.filter(person => {\n      const century = Math.ceil(person.born / ONE_CENTURY);\n\n      return centuries.includes(`${century}`);\n    });\n  }\n\n  if (query) {\n    preparedPeople = preparedPeople\n      .filter(({ name, motherName, fatherName }) => {\n        const preparedPersonName = getPreparedName(name, query);\n        const preparedMotherName = getPreparedName(motherName, query);\n        const preparedFatherName = getPreparedName(fatherName, query);\n\n        return preparedPersonName || preparedMotherName || preparedFatherName;\n      });\n  }\n\n  if (sex) {\n    preparedPeople = preparedPeople.filter(person => {\n      switch (sex) {\n        case GenderKinds.Female:\n          return person.sex === GenderKinds.Female;\n        case GenderKinds.Male:\n          return person.sex === GenderKinds.Male;\n        default:\n          return person;\n      }\n    });\n  }\n\n  return preparedPeople;\n};\n\nexport const preparedPerson = (people:Person[]) => {\n  return people.map((person:Person) => {\n    const mother = people.find(({ name }:Person) => name === person.motherName);\n\n    const father = people.find(({ name }:Person) => name === person.fatherName);\n\n    return {\n      ...person,\n      mother,\n      father,\n    };\n  });\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from '../components/PeopleFilters';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { Loader } from '../components/Loader';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { getPreparedPeople, preparedPerson } from '../utils/servises';\n\nexport const PeoplePage = () => {\n  const [newPeople, setNewPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then((people) => {\n        return preparedPerson(people);\n      })\n      .then(setNewPeople)\n      .catch(() => {\n        setIsError(true);\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const visiblePeople = getPreparedPeople(\n    newPeople,\n    query,\n    sex,\n    centuries,\n    sort,\n    order,\n  );\n\n  const isDisplayErrorMessage = isError && !isLoading;\n\n  const isNoPeopleOnServer = !newPeople.length && !isLoading && !isError;\n\n  const isPeopleOnServer = !!newPeople.length && !isError;\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {isPeopleOnServer && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              {isDisplayErrorMessage && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {isNoPeopleOnServer && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {isPeopleOnServer\n                && (visiblePeople.length ? (\n                  <PeopleTable people={visiblePeople} />\n                ) : (\n                  <p>\n                    There are no people matching the current search criteria\n                  </p>\n                ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","export const NotFoundPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import {\n  HashRouter as Router,\n  Routes,\n  Route,\n  Navigate,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { HomePage } from './pages/HomePage';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\n\nexport const Root = () => (\n  <Router>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<HomePage />} />\n        <Route path=\"people\">\n          <Route path=\":slug?\" element={<PeoplePage />} />\n        </Route>\n        <Route path=\"*\" element={<NotFoundPage />} />\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n      </Route>\n    </Routes>\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}